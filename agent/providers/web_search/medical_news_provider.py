"""
Provider para b√∫squeda de noticias m√©dicas actualizadas sobre aud√≠fonos y salud auditiva.
"""

import requests
import logging
from typing import Dict, Any
import os
from datetime import datetime, timedelta

class MedicalNewsProvider:
    """Provider para obtener noticias m√©dicas actualizadas"""
    
    # Configuraci√≥n de tiempo de b√∫squeda (en d√≠as)
    DEFAULT_SEARCH_DAYS = 30  # 30 d√≠as por defecto (l√≠mite del plan gratuito de News API)
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def get_latest_hearing_aid_news(self, days: int = None) -> Dict[str, Any]:
        """
        Obtiene las √∫ltimas noticias sobre aud√≠fonos y salud auditiva.
        
        Args:
            days: N√∫mero de d√≠as hacia atr√°s para buscar
            
        Returns:
            Dict con noticias encontradas
        """
        return self._get_news_with_fallback(
            query="aud√≠fonos OR hearing aids OR audiolog√≠a OR otorrinolaringolog√≠a OR p√©rdida auditiva OR audici√≥n OR o√≠do OR sordera OR hipoacusia OR implante coclear OR audi√≥logo OR otorrino OR tecnolog√≠a auditiva OR hearing technology OR audiology",
            keywords=["aud√≠fono", "hearing", "audiolog√≠a", "otorrino", "audici√≥n", "o√≠do", "sordera", "hipoacusia", "implante", "audi√≥logo", "audiology", "hearing aids", "hearing technology", "tecnolog√≠a auditiva", "p√©rdida auditiva"],
            days=days,
            topic="aud√≠fonos"
        )
    
    def get_medical_research_news(self, days: int = None) -> Dict[str, Any]:
        """Obtiene noticias de investigaci√≥n m√©dica en audici√≥n"""
        return self._get_news_with_fallback(
            query="investigaci√≥n audici√≥n OR hearing research OR estudio auditivo OR medical research hearing OR audiology research",
            keywords=["investigaci√≥n", "research", "estudio", "medical", "audici√≥n", "hearing"],
            days=days,
            topic="investigaci√≥n en audici√≥n"
        )
    
    def get_medical_technology_news(self, days: int = None) -> Dict[str, Any]:
        """Obtiene noticias de tecnolog√≠a m√©dica en audici√≥n"""
        return self._get_news_with_fallback(
            query="tecnolog√≠a aud√≠fonos OR hearing technology OR innovaci√≥n auditiva OR medical technology hearing",
            keywords=["tecnolog√≠a", "technology", "innovaci√≥n", "innovation", "aud√≠fono", "hearing"],
            days=days,
            topic="tecnolog√≠a en audici√≥n"
        )
    
    def _get_news_with_fallback(self, query: str, keywords: list, days: int = None, topic: str = "aud√≠fonos") -> Dict[str, Any]:
        """M√©todo centralizado para obtener noticias con fallback"""
        try:
            # Usar el valor por defecto si no se especifica
            if days is None:
                days = self.DEFAULT_SEARCH_DAYS
            
            # Verificar API key
            news_api_key = os.getenv("NEWS_API_KEY")
            if not news_api_key:
                self.logger.error("‚ùå News API key NO encontrada en variables de entorno")
                return {
                    "error": "News API key not found",
                    "message": "La API key de News API no est√° configurada. Agrega NEWS_API_KEY a tus variables de entorno."
                }
            
            # Probar la API key
            if not self._test_news_api(news_api_key):
                return {
                    "error": "News API key invalid",
                    "message": "La API key de News API no es v√°lida o no tiene permisos. Verifica tu configuraci√≥n."
                }
            
            # Buscar noticias
            result = self._search_news_api(query, days, news_api_key)
            self.logger.info(f"üì∞ Noticias encontradas en News API: {result.get('total_results', 0)}")
            
            if result.get("total_results", 0) > 0:
                # Filtrar noticias relevantes
                relevant_articles = [
                    article for article in result.get("articles", [])
                    if any(keyword in article.get("title", "").lower() or 
                           keyword in article.get("description", "").lower()
                           for keyword in keywords)
                ]
                
                self.logger.info(f"üì∞ Art√≠culos relevantes despu√©s del filtro: {len(relevant_articles)}")
                
                if relevant_articles:
                    result["articles"] = relevant_articles[:5]
                    result["total_results"] = len(relevant_articles)
                    self.logger.info("‚úÖ Devolviendo noticias reales de News API")
                    return result
            
            # No usar fallback, devolver error claro
            self.logger.info("üîç No se encontraron noticias en News API")
            
            return {
                "error": "No relevant news found",
                "message": f"No se encontraron noticias espec√≠ficas sobre {topic} en los √∫ltimos {days} d√≠as. Esto es normal porque las noticias sobre aud√≠fonos no son tan frecuentes como otros temas m√©dicos."
            }
            
        except Exception as e:
            self.logger.error(f"Error obteniendo noticias: {e}")
            return {
                "error": "News API error",
                "message": "Error al obtener noticias. Verifica tu conexi√≥n a internet y la configuraci√≥n de la API."
            }
    
    def _search_news_api(self, query: str, days: int, api_key: str) -> Dict[str, Any]:
        """Busca usando News API"""
        try:
            from_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            
            url = "https://newsapi.org/v2/everything"
            params = {
                'q': query,
                'from': from_date,
                'language': 'es',
                'sortBy': 'publishedAt',
                'apiKey': api_key,
                'pageSize': 10
            }
            
            response = self.session.get(url, params=params)
            data = response.json()
            
            if data.get('status') == 'ok':
                articles = data.get('articles', [])
                return {
                    "source": "News API",
                    "total_results": len(articles),
                    "articles": [
                        {
                            "title": article.get('title', ''),
                            "description": article.get('description', ''),
                            "url": article.get('url', ''),
                            "published_at": article.get('publishedAt', ''),
                            "source": article.get('source', {}).get('name', '')
                        }
                        for article in articles[:5]
                    ]
                }
            else:
                raise Exception(f"News API error: {data.get('message', 'Unknown error')}")
                
        except Exception as e:
            self.logger.error(f"Error en News API search: {e}")
            raise
    


    def _test_news_api(self, api_key: str) -> bool:
        """Prueba si la API key de News API funciona correctamente"""
        try:
            self.logger.info("üîç Probando News API key...")
            
            url = "https://newsapi.org/v2/top-headlines"
            params = {
                'country': 'es',
                'apiKey': api_key,
                'pageSize': 1
            }
            
            response = self.session.get(url, params=params)
            data = response.json()
            
            if data.get('status') == 'ok':
                self.logger.info("‚úÖ News API key funciona correctamente")
                return True
            elif data.get('status') == 'error':
                self.logger.error(f"‚ùå News API key error: {data.get('message', 'Sin mensaje de error')}")
                return False
            else:
                self.logger.error(f"‚ùå News API error: {data.get('status')}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error probando News API: {e}")
            return False
    
    def get_medical_trends(self) -> str:
        """Obtiene tendencias actuales en salud auditiva"""
        trends = [
            "üéß **Aud√≠fonos con IA**: Control autom√°tico de ruido y adaptaci√≥n personalizada",
            "üì± **Conectividad Total**: Integraci√≥n con smartphones y dispositivos inteligentes",
            "üîã **Bater√≠as Recargables**: Mayor duraci√≥n y menos residuos",
            "üéØ **Personalizaci√≥n Avanzada**: Ajustes espec√≠ficos para cada tipo de p√©rdida auditiva",
            "üåç **Sostenibilidad**: Materiales eco-friendly y packaging reciclable"
        ]
        
        return "\n".join(trends[:3])
    
    def get_medical_advice_by_topic(self, topic: str) -> str:
        """Obtiene consejos m√©dicos espec√≠ficos por tema"""
        advice_database = {
            "adaptaci√≥n": {
                "title": "üéß Proceso de Adaptaci√≥n a Aud√≠fonos",
                "tips": [
                    "‚Ä¢ La adaptaci√≥n puede tomar 2-4 semanas",
                    "‚Ä¢ Comienza con vol√∫menes bajos",
                    "‚Ä¢ Practica en entornos tranquilos primero",
                    "‚Ä¢ Mant√©n un diario de progreso"
                ]
            },
            "mantenimiento": {
                "title": "üîß Mantenimiento de Aud√≠fonos",
                "tips": [
                    "‚Ä¢ Limpia diariamente con pa√±o suave",
                    "‚Ä¢ Evita la humedad y el agua",
                    "‚Ä¢ Revisa las pilas regularmente",
                    "‚Ä¢ Guarda en estuche seco por la noche"
                ]
            },
            "precios": {
                "title": "üí∞ Informaci√≥n de Precios",
                "tips": [
                    "‚Ä¢ Rango: 500-3000‚Ç¨ seg√∫n tecnolog√≠a",
                    "‚Ä¢ Consulta con varios centros",
                    "‚Ä¢ Pregunta por financiaci√≥n",
                    "‚Ä¢ Algunos seguros cubren parte del coste"
                ]
            },
            "tecnolog√≠a": {
                "title": "üì± Tecnolog√≠a Moderna",
                "tips": [
                    "‚Ä¢ Bluetooth para smartphones",
                    "‚Ä¢ Control de ruido autom√°tico",
                    "‚Ä¢ Aplicaciones de ajuste remoto",
                    "‚Ä¢ Bater√≠as recargables disponibles"
                ]
            }
        }
        
        topic_lower = topic.lower()
        for key, value in advice_database.items():
            if key in topic_lower or topic_lower in key:
                return f"{value['title']}\n" + "\n".join(value['tips'])
        
        return "üí° Consulta con un especialista para consejos personalizados seg√∫n tu caso espec√≠fico."

# Instancia global
medical_news_provider = MedicalNewsProvider() 