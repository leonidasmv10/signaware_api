"""
Script para probar que el sistema genera espec√≠ficamente aud√≠fonos m√©dicos para sordera.
"""

import sys
import os

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from agent.nodes.chatbot_nodes import ChatbotNodes

def test_medical_hearing_aid_detection():
    """Prueba que el sistema detecta correctamente aud√≠fonos m√©dicos."""
    print("üß™ Probando detecci√≥n de aud√≠fonos m√©dicos...")
    
    # Crear instancia de nodos
    nodes = ChatbotNodes()
    
    # Casos de prueba espec√≠ficos para aud√≠fonos m√©dicos
    test_cases = [
        "Genera una imagen de un aud√≠fono m√©dico para sordera",
        "Crea un aud√≠fono m√©dico para p√©rdida auditiva",
        "Dibuja un aud√≠fono m√©dico para discapacidad auditiva",
        "Mu√©strame un aud√≠fono m√©dico digital",
        "Aud√≠fono m√©dico inteligente con app",
        "Aud√≠fono m√©dico retroauricular",
        "Aud√≠fono m√©dico intraauricular",
        "Aud√≠fono m√©dico intracanal",
        "Aud√≠fono m√©dico completamente intracanal",
        "Aud√≠fono m√©dico con receptor en canal"
    ]
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\n{'='*70}")
        print(f"üîç Prueba {i}: '{test_input}'")
        print(f"{'='*70}")
        
        try:
            # Extraer par√°metros
            hearing_aid_type, description = nodes._extract_hearing_aid_image_parameters(test_input)
            
            print(f"‚úÖ Par√°metros extra√≠dos:")
            print(f"   Tipo: {hearing_aid_type}")
            print(f"   Descripci√≥n: {description}")
            
            # Verificar que la descripci√≥n incluye t√©rminos m√©dicos
            medical_terms = ["medical", "hearing loss", "deafness", "hearing aid"]
            has_medical_terms = any(term in description.lower() for term in medical_terms)
            
            if has_medical_terms:
                print(f"‚úÖ Descripci√≥n incluye t√©rminos m√©dicos correctos")
            else:
                print(f"‚ö†Ô∏è Descripci√≥n no incluye t√©rminos m√©dicos espec√≠ficos")
            
        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {e}")
    
    print(f"\n{'='*70}")
    print("üèÅ Prueba de detecci√≥n de aud√≠fonos m√©dicos completada")
    print(f"{'='*70}")

def test_provider_medical_prompts():
    """Prueba que el provider genera prompts m√©dicos correctos."""
    print("\nüß™ Probando prompts m√©dicos del provider...")
    
    try:
        from agent.providers.image_generation.image_generator_manager import image_generator_manager
        
        # Obtener el generador
        generator = image_generator_manager.get_generator("stable_diffusion")
        
        if generator and hasattr(generator, 'generate_hearing_aid_image'):
            print(f"‚úÖ Generador disponible con m√©todo m√©dico")
            
            # Probar diferentes tipos de aud√≠fonos m√©dicos
            medical_descriptions = [
                "medical hearing aid device for hearing loss",
                "medical behind the ear hearing aid device for hearing loss",
                "medical in the ear hearing aid device for hearing loss",
                "wireless bluetooth medical hearing aid device for hearing loss",
                "rechargeable medical hearing aid device for hearing loss"
            ]
            
            for i, description in enumerate(medical_descriptions, 1):
                print(f"\nüîç Prueba {i}: {description}")
                
                try:
                    result = generator.generate_hearing_aid_image(description)
                    
                    if result.get("success"):
                        print(f"‚úÖ Imagen m√©dica generada exitosamente")
                        print(f"   Prompt: {result.get('prompt', 'N/A')}")
                        
                        # Verificar que el prompt incluye t√©rminos m√©dicos
                        prompt = result.get('prompt', '').lower()
                        medical_indicators = [
                            'medical', 'hearing loss', 'deafness', 'medical device',
                            'medical equipment', 'hearing aid'
                        ]
                        
                        has_medical_terms = any(term in prompt for term in medical_indicators)
                        if has_medical_terms:
                            print(f"‚úÖ Prompt incluye t√©rminos m√©dicos correctos")
                        else:
                            print(f"‚ö†Ô∏è Prompt no incluye t√©rminos m√©dicos espec√≠ficos")
                            
                    else:
                        print(f"‚ùå Error en generaci√≥n: {result.get('error', 'Error desconocido')}")
                        
                except Exception as e:
                    print(f"‚ùå Error en prueba {i}: {e}")
        else:
            print(f"‚ùå Generador o m√©todo no disponible")
            
    except Exception as e:
        print(f"‚ùå Error probando provider: {e}")

def test_negative_prompts():
    """Prueba que el sistema evita generar auriculares de m√∫sica."""
    print("\nüß™ Probando que evita auriculares de m√∫sica...")
    
    try:
        from agent.providers.image_generation.image_generator_manager import image_generator_manager
        
        generator = image_generator_manager.get_generator("stable_diffusion")
        
        if generator and hasattr(generator, 'generate_hearing_aid_image'):
            # Probar que el negative prompt incluye t√©rminos para evitar
            result = generator.generate_hearing_aid_image("medical hearing aid device for hearing loss")
            
            if result.get("success"):
                negative_prompt = result.get("negative_prompt", "")
                print(f"üìã Negative prompt: {negative_prompt}")
                
                # Verificar que incluye t√©rminos para evitar auriculares de m√∫sica
                avoid_terms = [
                    "headphones", "earbuds", "music headphones", "gaming headset",
                    "wireless earbuds", "airpods", "earphones", "music device"
                ]
                
                has_avoid_terms = any(term in negative_prompt.lower() for term in avoid_terms)
                
                if has_avoid_terms:
                    print(f"‚úÖ Negative prompt incluye t√©rminos para evitar auriculares de m√∫sica")
                else:
                    print(f"‚ö†Ô∏è Negative prompt no incluye t√©rminos para evitar auriculares")
            else:
                print(f"‚ùå Error en generaci√≥n: {result.get('error', 'Error desconocido')}")
        else:
            print(f"‚ùå Generador no disponible")
            
    except Exception as e:
        print(f"‚ùå Error probando negative prompts: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de aud√≠fonos m√©dicos...")
    
    # Ejecutar pruebas
    test_medical_hearing_aid_detection()
    test_provider_medical_prompts()
    test_negative_prompts()
    
    print("\n‚úÖ Todas las pruebas completadas") 