"""
Script para probar la generaci√≥n de im√°genes de aud√≠fonos.
"""

import sys
import os

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from agent.nodes.chatbot_nodes import ChatbotNodes

def test_hearing_aid_image_parameters():
    """Prueba la extracci√≥n de par√°metros de im√°genes de aud√≠fonos."""
    print("üß™ Probando extracci√≥n de par√°metros de im√°genes de aud√≠fonos...")
    
    # Crear instancia de nodos
    nodes = ChatbotNodes()
    
    # Casos de prueba espec√≠ficos para aud√≠fonos m√©dicos
    test_cases = [
        "Genera una imagen de un aud√≠fono m√©dico para sordera",
        "Crea un aud√≠fono m√©dico detr√°s de la oreja",
        "Dibuja un aud√≠fono m√©dico inal√°mbrico con bluetooth",
        "Mu√©strame un aud√≠fono m√©dico recargable",
        "Imagen de aud√≠fono m√©dico discreto",
        "Aud√≠fono m√©dico dentro del o√≠do",
        "Aud√≠fono m√©dico en el canal auditivo",
        "Aud√≠fono m√©dico para p√©rdida auditiva",
        "Aud√≠fono m√©dico para discapacidad auditiva",
        "Aud√≠fono m√©dico digital",
        "Aud√≠fono m√©dico inteligente"
    ]
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\n{'='*60}")
        print(f"üîç Prueba {i}: '{test_input}'")
        print(f"{'='*60}")
        
        try:
            # Extraer par√°metros
            hearing_aid_type, description = nodes._extract_hearing_aid_image_parameters(test_input)
            
            print(f"‚úÖ Par√°metros extra√≠dos:")
            print(f"   Tipo: {hearing_aid_type}")
            print(f"   Descripci√≥n: {description}")
            
        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {e}")
    
    print(f"\n{'='*60}")
    print("üèÅ Prueba de extracci√≥n de par√°metros completada")
    print(f"{'='*60}")

def test_image_generation():
    """Prueba la generaci√≥n de im√°genes de aud√≠fonos."""
    print("\nüß™ Probando generaci√≥n de im√°genes de aud√≠fonos...")
    
    # Crear instancia de nodos
    nodes = ChatbotNodes()
    
    # Casos de prueba espec√≠ficos para aud√≠fonos m√©dicos
    test_cases = [
        "Genera una imagen de un aud√≠fono m√©dico para sordera",
        "Crea un aud√≠fono m√©dico detr√°s de la oreja",
        "Dibuja un aud√≠fono m√©dico inal√°mbrico"
    ]
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\n{'='*60}")
        print(f"üîç Prueba {i}: '{test_input}'")
        print(f"{'='*60}")
        
        try:
            # Estado de prueba
            test_state = {
                "user_input": test_input,
                "text_generator_model": "gemini"
            }
            
            # Ejecutar el nodo
            final_state = nodes.generate_image_node(test_state)
            
            print(f"‚úÖ Nodo ejecutado exitosamente")
            
            # Verificar respuesta
            response = final_state.get("response", "")
            if response:
                print(f"üìù Respuesta generada (primeros 200 chars):")
                print(f"{response[:200]}...")
                
                # Verificar si es JSON v√°lido
                try:
                    import json
                    response_obj = json.loads(response)
                    if response_obj.get("success"):
                        print(f"‚úÖ Imagen generada exitosamente")
                        print(f"   Tipo: {response_obj.get('hearing_aid_type', 'N/A')}")
                        print(f"   Descripci√≥n: {response_obj.get('description', 'N/A')}")
                    else:
                        print(f"‚ùå Error en generaci√≥n: {response_obj.get('error', 'Error desconocido')}")
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è Respuesta no es JSON v√°lido: {response}")
            else:
                print(f"‚ùå No se gener√≥ respuesta")
            
        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {e}")
    
    print(f"\n{'='*60}")
    print("üèÅ Prueba de generaci√≥n de im√°genes completada")
    print(f"{'='*60}")

def test_provider_methods():
    """Prueba los m√©todos espec√≠ficos del provider de aud√≠fonos."""
    print("\nüß™ Probando m√©todos del provider de aud√≠fonos...")
    
    try:
        from agent.providers.image_generation.image_generator_manager import image_generator_manager
        
        # Obtener el generador
        generator = image_generator_manager.get_generator("stable_diffusion")
        
        if generator:
            print(f"‚úÖ Generador disponible: {generator.__class__.__name__}")
            
            # Verificar si tiene el m√©todo espec√≠fico
            if hasattr(generator, 'generate_hearing_aid_image'):
                print(f"‚úÖ M√©todo generate_hearing_aid_image disponible")
                
                # Probar generaci√≥n
                result = generator.generate_hearing_aid_image("modern hearing aid device")
                
                if result.get("success"):
                    print(f"‚úÖ Imagen de aud√≠fono generada exitosamente")
                    print(f"   Prompt: {result.get('prompt', 'N/A')}")
                    print(f"   Par√°metros: {result.get('parameters', {})}")
                else:
                    print(f"‚ùå Error en generaci√≥n: {result.get('error', 'Error desconocido')}")
            else:
                print(f"‚ùå M√©todo generate_hearing_aid_image no disponible")
        else:
            print(f"‚ùå Generador no disponible")
            
    except Exception as e:
        print(f"‚ùå Error probando provider: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de im√°genes de aud√≠fonos...")
    
    # Ejecutar pruebas
    test_hearing_aid_image_parameters()
    test_provider_methods()
    test_image_generation()
    
    print("\n‚úÖ Todas las pruebas completadas") 